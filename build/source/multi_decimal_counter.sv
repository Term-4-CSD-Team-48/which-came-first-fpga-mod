/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module multi_decimal_counter #(
        parameter DIGITS = 3'h4
    ) (
        input wire clk,
        input wire rst,
        input wire inc,
        output reg [(DIGITS)-1:0][3:0] digits
    );
    logic [(DIGITS)-1:0] M_dctr_inc;
    logic [(DIGITS)-1:0] M_dctr_ovf;
    logic [(DIGITS)-1:0][3:0] M_dctr_value;
    
    genvar idx_0_1236746726;
    
    generate
        for (idx_0_1236746726 = 0; idx_0_1236746726 < DIGITS; idx_0_1236746726 = idx_0_1236746726 + 1) begin: forLoop_idx_0_1236746726
            decimal_counter dctr (
                .clk(clk),
                .rst(rst),
                .inc(M_dctr_inc[idx_0_1236746726]),
                .ovf(M_dctr_ovf[idx_0_1236746726]),
                .value(M_dctr_value[idx_0_1236746726])
            );
        end
    endgenerate
    
    
    always @* begin
        M_dctr_inc[1'h0] = inc;
        digits = M_dctr_value;
        M_dctr_inc[1'h1+:DIGITS - 1'h1] = M_dctr_ovf[1'h0+:DIGITS - 1'h1];
    end
    
    
endmodule