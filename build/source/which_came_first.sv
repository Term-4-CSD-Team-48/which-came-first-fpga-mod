/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module which_came_first (
        input wire clk,
        input wire rst,
        input wire btn_a,
        input wire btn_b,
        input wire reset_to_listening,
        output reg [1:0] out
    );
    localparam E_States_LISTENING = 1'h0;
    localparam E_States_DETERMINED = 1'h1;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam logic [1:0][0:0] _MP_RISE_1208688302 = {{1'h1, 1'h1}};
    localparam logic [1:0][0:0] _MP_FALL_1208688302 = {{1'h0, 1'h0}};
    logic [1:0] M_btn_edge_in;
    logic [1:0] M_btn_edge_out;
    
    genvar idx_0_1208688302;
    
    generate
        for (idx_0_1208688302 = 0; idx_0_1208688302 < 2; idx_0_1208688302 = idx_0_1208688302 + 1) begin: forLoop_idx_0_1208688302
            edge_detector #(
                .RISE(_MP_RISE_1208688302[idx_0_1208688302]),
                .FALL(_MP_FALL_1208688302[idx_0_1208688302])
            ) btn_edge (
                .clk(clk),
                .in(M_btn_edge_in[idx_0_1208688302]),
                .out(M_btn_edge_out[idx_0_1208688302])
            );
        end
    endgenerate
    
    
    localparam _MP_RISE_1251802514 = 1'h1;
    localparam _MP_FALL_1251802514 = 1'h0;
    logic M_reset_to_listening_edge_in;
    logic M_reset_to_listening_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1251802514),
        .FALL(_MP_FALL_1251802514)
    ) reset_to_listening_edge (
        .clk(clk),
        .in(M_reset_to_listening_edge_in),
        .out(M_reset_to_listening_edge_out)
    );
    
    
    localparam logic [1:0][26:0] _MP_CLK_FREQ_1824261817 = {{27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_1824261817 = 5'h14;
    localparam _MP_NUM_SYNC_1824261817 = 2'h2;
    logic [1:0] M_btn_cond_in;
    logic [1:0] M_btn_cond_out;
    
    genvar idx_0_1824261817;
    
    generate
        for (idx_0_1824261817 = 0; idx_0_1824261817 < 2; idx_0_1824261817 = idx_0_1824261817 + 1) begin: forLoop_idx_0_1824261817
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1824261817[idx_0_1824261817]),
                .MIN_DELAY(_MP_MIN_DELAY_1824261817),
                .NUM_SYNC(_MP_NUM_SYNC_1824261817)
            ) btn_cond (
                .clk(clk),
                .in(M_btn_cond_in[idx_0_1824261817]),
                .out(M_btn_cond_out[idx_0_1824261817])
            );
        end
    endgenerate
    
    
    localparam _MP_CLK_FREQ_1230141155 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_1230141155 = 5'h14;
    localparam _MP_NUM_SYNC_1230141155 = 2'h2;
    logic M_reset_to_listening_cond_in;
    logic M_reset_to_listening_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1230141155),
        .MIN_DELAY(_MP_MIN_DELAY_1230141155),
        .NUM_SYNC(_MP_NUM_SYNC_1230141155)
    ) reset_to_listening_cond (
        .clk(clk),
        .in(M_reset_to_listening_cond_in),
        .out(M_reset_to_listening_cond_out)
    );
    
    
    logic [0:0] D_states_d, D_states_q = 1'h0;
    logic [1:0] D_out_dff_d, D_out_dff_q = 0;
    always @* begin
        D_states_d = D_states_q;
        D_out_dff_d = D_out_dff_q;
        
        M_btn_cond_in = {btn_a, btn_b};
        M_btn_edge_in = M_btn_cond_out;
        M_reset_to_listening_cond_in = reset_to_listening;
        M_reset_to_listening_edge_in = M_reset_to_listening_cond_out;
        D_states_d = D_states_q;
        D_out_dff_d = D_out_dff_q;
        
        case (D_states_q)
            1'h0: begin
                if (M_btn_edge_out[1'h0]) begin
                    D_out_dff_d = 2'h2;
                    D_states_d = 1'h1;
                end else begin
                    if (M_btn_edge_out[1'h1]) begin
                        D_out_dff_d = 2'h1;
                        D_states_d = 1'h1;
                    end else begin
                        D_out_dff_d = 1'h0;
                    end
                end
            end
            1'h1: begin
                if (M_reset_to_listening_edge_out) begin
                    D_states_d = 1'h0;
                end
            end
        endcase
        out = D_out_dff_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_states_q <= 1'h0;
            D_out_dff_q <= 0;
        end else begin
            D_states_q <= D_states_d;
            D_out_dff_q <= D_out_dff_d;
        end
    end
endmodule